package com.main.library;

import com.main.books.Book;
import com.main.members.Member;
import java.util.Map;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

public class Library implements LibraryOperation {
	
	private  List<Book> books;
	private  List<Member> members;

	public Library() {
		super();
		this.books = new ArrayList<>();
		this.members =new ArrayList<>();
	}

	public List<Book> getBooks() {
		return books;
	}

	public List<Member> getMembers() {
		return members;
	}
	
	public void setMembers(List<Member> members) {
		this.members = members;
	}

	void addBook(Book book) {
		books.add(book);
	}

	 void removeBook(Book book) {
		books.remove(book);
	}

	@Override
	public boolean issueBook(Book book, Member member) {
		if (book.isIssued()) {
			System.out.println("The Book '" + book.getBookTitle() + "' is already issued to another member.");
			return false;
		}
		if (member.getCurrentIssuedBooks().size() >= member.getMaxBooksIssued()) {
			System.out.println("the Member '" + member.getName() + "' has already issued maximum number of books.");
			return false;
		} else {
			book.setisIssued(true);
			member.issueBook(book);
			removeBook(book);// Remove a book in Library only after successufull book is isssued
			return true;
		}
	}

	@Override
	public boolean returnBook(Book book, Member member) {
		if (!book.isIssued()) {
			System.out.println("'"+book.getBookTitle() + "' is not issued ");
			return false;
		}
		if (!member.getCurrentIssuedBooks().contains(book)) {
			System.out.println(
					"the book '" + book.getBookTitle() + "' is not isued to member '" + member.getName() + "'");
			return false;
		} else {
			book.setisIssued(false);
			member.returnBook(book);
			addBook(book);// Added a book in Library only after successfully return a book
			return true;
		}
	}

}
